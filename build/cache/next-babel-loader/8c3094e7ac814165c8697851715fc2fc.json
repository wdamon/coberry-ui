{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext, createContext } from \"react\";\nvar authContext = createContext({}); // Provider component that wraps your app and makes auth object  available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth\n  }, children);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport var useAuth = function useAuth() {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var onSignIn = function onSignIn(googleUser) {\n    var profile = googleUser.getBasicProfile();\n    console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\n\n    console.log('Name: ' + profile.getName());\n    console.log('Image URL: ' + profile.getImageUrl());\n    console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\n  };\n\n  var signup = function signup(email, password) {\n    console.log('foo bar baz');\n  };\n\n  var signout = function signout() {\n    var auth2;\n    return _regeneratorRuntime.async(function signout$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            auth2 = gapi.auth2.getAuthInstance();\n            auth2.signOut().then(function () {\n              console.log('User signed out.');\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var sendPasswordResetEmail = function sendPasswordResetEmail(email) {\n    console.log('foo bar baz');\n  };\n\n  var confirmPasswordReset = function confirmPasswordReset(code, password) {\n    console.log('foo bar baz');\n  }; // Return the user object and auth methods\n\n\n  return {\n    user: user,\n    onSignIn: onSignIn,\n    signup: signup,\n    signout: signout,\n    sendPasswordResetEmail: sendPasswordResetEmail,\n    confirmPasswordReset: confirmPasswordReset\n  };\n}","map":{"version":3,"sources":["/Users/wgdamon/coberry-ui/hooks/useAuth.tsx"],"names":["React","useState","useContext","createContext","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","onSignIn","googleUser","profile","getBasicProfile","console","log","getId","getName","getImageUrl","getEmail","signup","email","password","signout","auth2","gapi","getAuthInstance","signOut","then","sendPasswordResetEmail","confirmPasswordReset","code"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AAEA,IAAMC,WAAW,GAAGD,aAAa,CAAC,EAAD,CAAjC,C,CAEA;;AACA,OAAO,SAASE,WAAT,OAAmC;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACxC,MAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,SAAO,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED;AAA7B,KAAoCD,QAApC,CAAP;AACD,C,CAED;AACA;;AACA,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAOP,UAAU,CAACE,WAAD,CAAjB;AACD,CAFM,C,CAIP;;AACA,SAASI,cAAT,GAA0B;AAAA,kBACAP,QAAQ,CAAC,IAAD,CADR;AAAA,MACjBS,IADiB;AAAA,MACXC,OADW;;AAGxB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAAgB;AAC/B,QAAIC,OAAO,GAAGD,UAAU,CAACE,eAAX,EAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASH,OAAO,CAACI,KAAR,EAArB,EAF+B,CAEQ;;AACvCF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWH,OAAO,CAACK,OAAR,EAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBH,OAAO,CAACM,WAAR,EAA5B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,OAAO,CAACO,QAAR,EAAxB,EAL+B,CAKc;AAC9C,GAND;;AAQA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAClCR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;;AAIA,MAAMQ,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,KADQ,GACAC,IAAI,CAACD,KAAL,CAAWE,eAAX,EADA;AAEdF,YAAAA,KAAK,CAACG,OAAN,GAAgBC,IAAhB,CAAqB,YAAY;AAC/Bd,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,aAFD;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAOA,MAAMc,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAR,KAAK,EAAI;AACtCP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;;AAIA,MAAMe,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAOT,QAAP,EAAoB;AAC3CR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACL,GAFD,CA1BwB,CA8BxB;;;AACA,SAAO;AACLP,IAAAA,IAAI,EAAJA,IADK;AAELE,IAAAA,QAAQ,EAARA,QAFK;AAGLU,IAAAA,MAAM,EAANA,MAHK;AAILG,IAAAA,OAAO,EAAPA,OAJK;AAKLM,IAAAA,sBAAsB,EAAtBA,sBALK;AAMLC,IAAAA,oBAAoB,EAApBA;AANK,GAAP;AAQD","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\n\nconst authContext = createContext({});\n\n// Provider component that wraps your app and makes auth object  available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n  \n  const onSignIn = (googleUser) => {\n    var profile = googleUser.getBasicProfile();\n    console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\n    console.log('Name: ' + profile.getName());\n    console.log('Image URL: ' + profile.getImageUrl());\n    console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\n  }\n\n  const signup = (email, password) => {\n    console.log('foo bar baz');\n  };\n\n  const signout = async () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {\n      console.log('User signed out.');\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    console.log('foo bar baz');\n  };\n\n  const confirmPasswordReset = (code, password) => {\n        console.log('foo bar baz');\n  };\n  \n  // Return the user object and auth methods\n  return {\n    user,\n    onSignIn,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}"]},"metadata":{},"sourceType":"module"}