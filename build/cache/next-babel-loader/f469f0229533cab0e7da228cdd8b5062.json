{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext, createContext } from \"react\";\nconst authContext = createContext({}); // Provider component that wraps your app and makes auth object  available to any child component that calls useAuth().\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth\n  }, children);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n\n  const onSignIn = googleUser => {\n    var profile = googleUser.getBasicProfile();\n    console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\n\n    console.log('Name: ' + profile.getName());\n    console.log('Image URL: ' + profile.getImageUrl());\n    console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\n  };\n\n  const signup = (email, password) => {\n    console.log('foo bar baz');\n  };\n\n  const signout = async () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {\n      console.log('User signed out.');\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    console.log('foo bar baz');\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    console.log('foo bar baz');\n  }; // Return the user object and auth methods\n\n\n  return {\n    user,\n    onSignIn,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}","map":{"version":3,"sources":["/Users/wgdamon/coberry-ui/hooks/useAuth.tsx"],"names":["React","useState","useContext","createContext","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","onSignIn","googleUser","profile","getBasicProfile","console","log","getId","getName","getImageUrl","getEmail","signup","email","password","signout","auth2","gapi","getAuthInstance","signOut","then","sendPasswordResetEmail","confirmPasswordReset","code"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AAEA,MAAMC,WAAW,GAAGD,aAAa,CAAC,EAAD,CAAjC,C,CAEA;;AACA,OAAO,SAASE,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmC;AACxC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,SAAO,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED;AAA7B,KAAoCD,QAApC,CAAP;AACD,C,CAED;AACA;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAOP,UAAU,CAACE,WAAD,CAAjB;AACD,CAFM,C,CAIP;;AACA,SAASI,cAAT,GAA0B;AACxB,QAAM;AAAA,OAACE,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMW,QAAQ,GAAIC,UAAD,IAAgB;AAC/B,QAAIC,OAAO,GAAGD,UAAU,CAACE,eAAX,EAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASH,OAAO,CAACI,KAAR,EAArB,EAF+B,CAEQ;;AACvCF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWH,OAAO,CAACK,OAAR,EAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBH,OAAO,CAACM,WAAR,EAA5B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,OAAO,CAACO,QAAR,EAAxB,EAL+B,CAKc;AAC9C,GAND;;AAQA,QAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClCR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;;AAIA,QAAMQ,OAAO,GAAG,YAAY;AAC1B,UAAMC,KAAK,GAAGC,IAAI,CAACD,KAAL,CAAWE,eAAX,EAAd;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBC,IAAhB,CAAqB,YAAY;AAC/Bd,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAFD;AAGD,GALD;;AAOA,QAAMc,sBAAsB,GAAGR,KAAK,IAAI;AACtCP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;;AAIA,QAAMe,oBAAoB,GAAG,CAACC,IAAD,EAAOT,QAAP,KAAoB;AAC3CR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACL,GAFD,CA1BwB,CA8BxB;;;AACA,SAAO;AACLP,IAAAA,IADK;AAELE,IAAAA,QAFK;AAGLU,IAAAA,MAHK;AAILG,IAAAA,OAJK;AAKLM,IAAAA,sBALK;AAMLC,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\n\nconst authContext = createContext({});\n\n// Provider component that wraps your app and makes auth object  available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n  \n  const onSignIn = (googleUser) => {\n    var profile = googleUser.getBasicProfile();\n    console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\n    console.log('Name: ' + profile.getName());\n    console.log('Image URL: ' + profile.getImageUrl());\n    console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\n  }\n\n  const signup = (email, password) => {\n    console.log('foo bar baz');\n  };\n\n  const signout = async () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {\n      console.log('User signed out.');\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    console.log('foo bar baz');\n  };\n\n  const confirmPasswordReset = (code, password) => {\n        console.log('foo bar baz');\n  };\n  \n  // Return the user object and auth methods\n  return {\n    user,\n    onSignIn,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}"]},"metadata":{},"sourceType":"module"}